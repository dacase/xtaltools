#!/usr/bin/perl

$resno_prev = 0;
$chain_prev = "";
$seed = srand(int($ARGV[0]));
print "REMARK   select_alts run with seed of $ARGV[0]\n"; 

#-----------------------------------------------------------------------
# following is specfic to this particular system
@repeats = (56,59..61,67,70,78,99..100,116..120);
$residuesperchain = 181;
#-----------------------------------------------------------------------

for $i (@repeats){ $repeat[$i] = 1; }

open( PDB, "<", $ARGV[1] );

#-----------------------------------------------------------------------
#  first: find all the alternates that are in the input file:
#-----------------------------------------------------------------------

ATOM: while (<PDB>){

   if( $_ =~ /^ATOM|^HETATM/){

   #  expand to 80+ characters (really hokey version):
   chop($_);
   $_ .= "                                                                    ";

   ( $label, $atno, $atname, $alt, $resname, $chainId, $resno1, $iCode,
         $x, $y, $z, $occ, $bfact, $element, $charge ) =
       unpack("a6 a5 x a4 a a3 x a a4 a x3 a8 a8 a8 a6 a6 x10 a2 a2",$_);

   $resno = int($resno1);
   $altocc{$resno . $alt} = $occ if $alt ne " ";

   }
}
seek PDB, 0, 0;  # rewind the input file
$max_res = $resno;

#-----------------------------------------------------------------------
#  next, use the alternate info above to select the ensemble:
#-----------------------------------------------------------------------

@res = (1..$max_res);
for $res (@res) {
    if (defined $altocc{$res . "A"}) {
       $sum_occ = $altocc{$res . "A"} +
                  $altocc{$res . "B"} +
                  $altocc{$res . "C"} +
                  $altocc{$res . "D"} +
                  $altocc{$res . "E"};
       $altocc{$res . "A"} /= $sum_occ;
       $altocc{$res . "B"} /= $sum_occ;
       $altocc{$res . "C"} /= $sum_occ;
       $altocc{$res . "D"} /= $sum_occ;
       $altocc{$res . "E"} /= $sum_occ;
    }  
}

#-----------------------------------------------------------------------
#  next, use the alternate info above to select the ensemble:
#-----------------------------------------------------------------------

ATOM: while (<PDB>){

#
#   first, read in a pdb file line and unpack
#

if( $_ =~ /^ATOM|^HETATM/){

    #  expand to 80+ characters (really hokey version):
    chop($_);
    $_ .= "                                                                    "; 
    ( $label, $atno, $atname, $alt, $resname, $chainId, $resno1, $iCode,
          $x, $y, $z, $occ, $bfact, $element, $charge ) =
        unpack("a6 a5 x a4 a a3 x a a4 a x3 a8 a8 a8 a6 a6 x10 a2 a2",$_);
    $resno = int($resno1);

    #  determine the relative residue number: only needed for repeats
    $relres = $resno - (($resno -1)/$residuesperchain)*$residuesperchain;

    if( $resno != $resno_prev ){ 
       $rand = rand() unless defined $repeat[$relres];
       $resno_prev = $resno;
    }

    # N.B.: following should not require conformers to be in alphabetical order

    if( $alt eq "A" ){
        next ATOM if $rand > $altocc{$resno."A"}; 
    } elsif( $alt eq "B" ){
        next ATOM if $rand < $altocc{$resno."A"}; 
        next ATOM if $rand > $altocc{$resno."A"} + $altocc{$resno."B"}; 
    } elsif( $alt eq "C" ){
        next ATOM if $rand < $altocc{$resno."A"} + $altocc{$resno."B"}; 
        next ATOM if $rand > $altocc{$resno."A"} + $altocc{$resno."B"} 
                           + $altocc{$resno."C"};
    } elsif( $alt eq "D" ){
        next ATOM if $rand < $altocc{$resno."A"} + $altocc{$resno."B"} 
                           + $altocc{$resno."C"};
        next ATOM if $rand > $altocc{$resno."A"} + $altocc{$resno."B"} 
                           + $altocc{$resno."C"} + $altocc{$resno."D"};
    } elsif( $alt eq "E" ){
        next ATOM if $rand < $altocc{$resno."A"} + $altocc{$resno."B"} 
                           + $altocc{$resno."C"} + $altocc{$resno."D"};
        next ATOM if $rand > $altocc{$resno."A"} + $altocc{$resno."B"} 
                           + $altocc{$resno."C"} + $altocc{$resno."D"}
                           + $altocc{$resno."E"};
    } elsif( $alt eq "F" ){
        print STDERR "Error: should never have an F conformer\n";
        exit(1);
    } elsif( $alt ne " " ){ 
        print STDERR "Error: trouble processing altocc $altocc\n";
        exit(1);
    }
                          
    $occ = 1.0;

    #
    #  write back out
    #
    printf 
    "%6s%5s %-4s%1s%3s %1s%4s%1s   %8.3f%8.3f%8.3f%6.2f%6.2f          %2s%2s\n",
          $label, $atno,$atname,$alt, $resname,$chainId, $resno, $iCode,
            $x,$y,$z, $occ, $bfact, $element, $charge;

} else {
    print;
}

}
