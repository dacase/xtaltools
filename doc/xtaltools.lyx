#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
\usepackage{multicol}
\usepackage{tocbibind}
%\usepackage[scaled=.85]{couriers}

\usepackage[font=it]{caption}
\usepackage{indentfirst}
\usepackage{textcomp}
%\usepackage{placeins}

% Label subsections
%\newrefformat{subsec}{Subsection \ref{#1}}

% Following to get bold-face typewriter font in LyXCode
\renewenvironment{lyxcode}
  {\begin{list}{}{
    \setlength{\rightmargin}{\leftmargin}
    \raggedright
    \setlength{\itemsep}{0pt}
    \setlength{\parsep}{0pt}
    \normalfont\bfseries\ttfamily}%
    \item[]}
  {\end{list}}

\addtokomafont{labelinglabel}{\texttt}
\end_preamble
\options sort&compress
\use_default_options false
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding iso8859-1
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 90 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 0
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue,citecolor=blue,urlcolor=blue"
\papersize letterpaper
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch advanced
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\branch basic
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\paperwidth 6in
\paperheight 9in
\leftmargin 1.2in
\topmargin 1in
\rightmargin 1in
\bottommargin 1.2in
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "basicstyle={\small\bfseries\ttfamily},frame=single,frameround=tttt,upquote=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\size giant
Xtaltools Reference Manual 
\end_layout

\begin_layout Author
David A Case
\end_layout

\begin_layout Standard
\align center

\size huge
\emph on
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Section
Overview of XtalTools
\begin_inset CommandInset label
LatexCommand label
name "sec:overview"

\end_inset


\end_layout

\begin_layout Standard
This section gives a bird's-eye view of capabilities of the 
\emph on
XtalTools
\emph default
 package.
 The hope is to get more detailed examples and documentation as time permits.
 The organization is based on the compuational tools required, which almost
 certainly not the best approach.
\end_layout

\begin_layout Section
ccp4_scripts
\end_layout

\begin_layout Standard
These scripts are based on the 
\emph on
CCP4
\emph default
 and 
\emph on
refmac5
\emph default
 programs.
\end_layout

\begin_layout Description
conf_solvent.sh Takes an electron density for the solvent (say from MD simulation
s or from integral equation models), plus an atomic model for the 
\begin_inset Quotes eld
\end_inset

solute
\begin_inset Quotes erd
\end_inset

 (generally a macromolecule like a protein), and refines the model with
 
\emph on
refmac5
\emph default
.
 As a comparison, ignores the input solvent density and uses the standard
 
\emph on
refmac5 
\emph default
bulk solvent contribution, as would be done in a conventional simulation.
 This offers one way to see if the input density is any 
\begin_inset Quotes eld
\end_inset

better
\begin_inset Quotes erd
\end_inset

 than the standard solvent contribution.
\end_layout

\begin_layout Description
md2diffuse.sh Takes snapshots from an MD simulation, and works through the
 steps to compute both the Bragg intensities and diffuse intensities.
 The 
\emph on
sfall
\emph default
 program is the key engine to compute scattering amplitudes.
 Special attention is paid to reducing disk space requirements, so that
 scattering amplitudes from many snapshots can be stored and analyzed.
 The code optionally will constuct map coefficients and an electron density
 map arising from the simulation.
\end_layout

\begin_layout Description
md2map.sh
\end_layout

\begin_layout Description
mdv2map.sh The two scripts compute the average electron density, as a CCP4
 map and as map coefficients, from an input MD simulation.
 Unlike the 
\series bold
md2diffuse.sh
\series default
 script, which computes the average scattering amplitudes, then uses an
 FFT to obtain the final map, these two scripts directly add the maps together,
 then uses a Fourier transform to obtain the map coefficients.
 Since no diffuse scattering information is needed, there is much less need
 to optimize disk space; still the overall amount of computation is about
 the same, 
\emph on
i.e.

\emph default
 that required to run 
\emph on
sfall
\emph default
 on each frame of the input trajectory.
 The 
\series bold
mdv2map.sh
\series default
 script assumes that the unit cell dimensions don't change throughout the
 trajectory, whereas 
\series bold
md2map.sh
\series default
 does not make this assumption.
\end_layout

\begin_layout Section
phenix_scripts
\end_layout

\begin_layout Description
XrayPrep This script currently has two parts, which can be run together,
 or separately.
 The first part uses the 
\emph on
phenix.AmberPrep
\emph default
 script to prepare an input pdb-format file for use in refinement.
 It usually works well, but is limited in its ability to handle unusual
 situations, such as post-translational modifications, etc.
 See the 
\emph on
run_alt_tleap
\emph default
 script below for a more flexible alternative.
 The second part of the script takes an 
\emph on
xxx-sf-cif
\emph default
 file from the PDB, and converts the information into files needed for amber-bas
ed refinement.
 This uses 
\emph on
phenix.refine
\emph default
 to do conversions, reject outliers, possible convert intensities to structure
 factors, expand to P1 symmetry, and so on.
 (Going forward, I will probably remove the first part of this script.)
\end_layout

\begin_layout Description
CryoPrep These two scripts take an atomic model (in the form of a PDB-format
 file), and either an electron density (as a CCP4 map) or structure factors
 (as an sf-cif file), and prepare all the files needed to carry out refinements
 that employ a molecular force field (rather than Engh-Huber like distance
 and angle restraints) to constrain the molecular geometry.
\end_layout

\begin_layout Description
run_phenix.solvent This is a sample script to allow comparisons of the bulk-solve
nt model in 
\emph on
phenix
\emph default
 and a user-supplied solvent density.
 Unlike the 
\series bold
conf_solvent.sh
\series default
 script based on 
\emph on
refmac5
\emph default
, this only works for a single-point, and doesn't carry out refinements
 that include the user-supplied solvent density.
\end_layout

\begin_layout Description
run_phenix_refine This is just an alternative way to run 
\emph on
phenix.refine
\emph default
 from the command line, with flexible ways to choose the input paramters.
 It's probably not for everyone.
\end_layout

\begin_layout Description
run_fmodel This just runs 
\emph on
phenix.fmodel
\emph default
 and re-formats the output in a simple but occasionally useful way.
\end_layout

\begin_layout Section
rism_scripts
\end_layout

\begin_layout Description
run_rism A simple script to run 3D-rism calcualtions (using the 
\emph on
msander
\emph default
 program) on a single snapshot.
 Typical values for grid spacing, closure and solvent model are hard-wired
 here, but you should edit this if you wish to make changes.
\end_layout

\begin_layout Description
run_metatwist_rho Takes the output from 
\emph on
run_rism
\emph default
 and computes an electron density map for the solvent.
 This can be used to replace the 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset

 bulk solvent density model in programs like 
\emph on
msander
\emph default
 or 
\emph on
refmac5
\emph default
.
\end_layout

\begin_layout Section
ensemble_scripts
\end_layout

\begin_layout Standard
These are scripts that are used to run ensemble refinements, where many
 complete copies of the macromolecule are present, generally arranged in
 a supercell.
 These are mainly useful as part of a bigger workflow, whose documentation
 is not yet ready.
\end_layout

\begin_layout Description
find_alts output a listing of alternate conformations found in an input
 pdb-file
\end_layout

\begin_layout Description
select_alts this is the main script, that takes an input pdb file with alternate
 conformations (for example, as found in the PDB).
 For each chain, it randomly selects an alternate conformer for each residue,
 based on its input occupation.
 The output file sets all occupations to 1.0.
 This is commonly used to create a starting model for ensemble refinement.
\end_layout

\begin_layout Description
modify_pdb is a utility perl script for making all manner of modifications
 to PDB files, at least that can be done on a line-by-line basis.
 The scripts reads an input PDB file, makes whatever changes are coded in
 an intermediate section, and writes out the result.
 
\end_layout

\begin_layout Description
modify_frac is a variant of modify_pdb that allows modification based on
 fractional coordinates, useful for repacking coordinates into a single
 unit cell, and so on.
\end_layout

\begin_layout Description
collapse_pdb takes an ensemble model and converts it into a more standard
 
\begin_inset Quotes eld
\end_inset

alternate conformer
\begin_inset Quotes erd
\end_inset

 model
\end_layout

\begin_layout Section
XtalAnalyze scripts
\end_layout

\begin_layout Standard
This is a set of scripts created by Pawel Janowski some years ago.
 The main current documentation is in the 
\emph on
README
\emph default
, 
\emph on
XtalAnalyze.sh
\emph default
 and 
\emph on
XtalPlot.sh
\emph default
 files.
 Read these for now to see how to run things.
\end_layout

\begin_layout Section
Setting up crystal simulations
\begin_inset CommandInset label
LatexCommand label
name "sec:crystals"

\end_inset


\end_layout

\begin_layout Standard
(The scripts described here (using the original documentation from Dave
 Cerutti) are in the 
\emph on
src
\emph default
 folder.)
\end_layout

\begin_layout Standard
\align center

\emph on
David S.
 Cerutti
\end_layout

\begin_layout Standard
Simulations of biomolecular crystals are in principle no different than
 any of the simulations that AMBER does in periodic boundary conditions.
 However, the setup of these systems is not trivial and probably cannot
 be accomplished with the LEaP software.
 Of principal importance are the construction of the solvent conditions
 (packing precise amounts of multiple solvent species into the simulation
 cell), and tailoring the unit cell dimensions to accommodate the inherently
 periodic nature of the system.
 The LEaP software, designed to construct simulations of molecules in solution,
 will overlay a pre-equilibrated solvent mask over the (biomolecular) solute,
 tile that mask throughout the simulation cell, and then prune solvent residues
 which clash with the solute.
 The result of this procedure is a system which will likely contract under
 constant pressure dynamics as the pruning process has left vacuum bubbles
 at the solute:solvent interface.
 Simulations of biomolecular crystals require that the simulation cell begin
 at a size corresponding to the crystallographic unit cell, and deviate
 very little from that size over the course of equilibration and onset of
 constant pressure dynamics.
 This demands a different strategy for placing solvent in the simulation
 cell.
 Four programs in the 
\emph on
AmberTools
\emph default
 release are designed to accomplish this.
 An example of their use in given in a web-based tutorial at 
\emph on
https://ambermd.org/tutorials/advanced/tutorial13/XtalTutor1.html 
\emph default
.
 A recent (2018) review of crystal simulations is also worth consulting.
\begin_inset CommandInset citation
LatexCommand citep
key "Cerutti18"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
For brevity, only basic descriptions of the programs are given in this manual.
 All of the programs may be run with command line input; the input options
 to each program may be listed by running each program with no arguments.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:UnitCell"

\end_inset

UnitCell
\end_layout

\begin_layout Standard
A macromolecular crystal contains many repeating unit cells which stack
 like blocks in three dimensional space just as simulation cells do in periodic
 boundary conditions.
 Each unit cell, in turn, may contain multiple symmetry-related clusters
 of atoms.
 A PDB file contains one set of coordinates for the irreducible unit of
 the crystal, the 
\begin_inset Quotes eld
\end_inset

asymmetric unit,
\begin_inset Quotes erd
\end_inset

 and also information about the crystal space group and unit cell dimensions.
 The 
\emph on
UnitCell
\emph default
 program reads PDB files, seeking the SMTRY records within the REMARKs to
 enumerate the rotation and translation operations which may be applied
 to the coordinates given in the PDB file to reconstruct one complete unit
 cell.
\end_layout

\begin_layout Standard
Usage of the 
\shape italic
UnitCell
\shape default
 program is as follows.
 The simple command rests on a critical assumption, that the PDB file contains
 an accurate CRYST1 record and that the REMARK 290 SMTRY records provide
 its space group symmetry operations.
 
\end_layout

\begin_layout LyX-Code
UnitCell -p MyProtein.pdb -o UnitCell.pdb
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:PropPDB"

\end_inset

PropPDB
\end_layout

\begin_layout Standard
Simulations in periodic boundary conditions require a minimum unit cell
 size: the simulation cell must be able to enclose a sphere of at least
 the nonbonded direct space cutoff radius plus a small buffer region for
 nonbonded pairlist updates.
 Many biomolecular crystal unit cells come in 
\begin_inset Quotes eld
\end_inset

shoebox
\begin_inset Quotes erd
\end_inset

 dimensions that may have one very short side; many unit cells are also
 not rectangular but triclinic, meaning that the size of the largest sphere
 they can enclose is further reduced.
 The workhorse simulation engine, pmemd.cuda, even requires that the simulation
 cell be at least three times as thick as the cutoff plus some buffer margin
 in order to run safely: for typical sum conditions this thickness is about
 30Å.
 For these reasons, and perhaps to ensure that the rigid symmetry imposed
 by periodic boundary conditions does not create artifacts (crystallographic
 unit cells are equivalent when averaged over all time and space, but are
 not necessarily identical at any given moment), it may be necessary to
 include multiple unit cells within the simulation cell.
 This is the purpose of the 
\emph on
PropPDB
\emph default
 program: to propagate a unit cell in one or more directions so that the
 complete simulation cell meets minimum size requirements.
\end_layout

\begin_layout Standard
Drawing on the hypothetical example above, if the unit cell is too small
 we can extend it in the 
\shape italic
x
\shape default
 and 
\shape italic
z
\shape default
 dimensions:
\end_layout

\begin_layout LyX-Code
PropPDB -p UnitCell -o ExpandedCell.pdb -ix 2 -iy 1 -iz 2
\end_layout

\begin_layout Subsection
AddToBox
\begin_inset CommandInset label
LatexCommand label
name "subsec:AddToBox"

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
AddToBox
\emph default
 program handles placement of solvent within a crystal unit cell or supercell
 (as may be created by PropPDB).
 As described in the introduction, the basic strategy is to place solvent
 such that added solvent molecules do not clash with biomolecule solutes,
 but 
\shape italic
may
\shape default
 clash with one another initially.
 This compromise is necessary because enough solvent must be added to the
 system to ensure that the correct unit cell dimensions are maintained in
 the long run, but it is not acceptable to place solvent within the interior
 of a biomolecule where it might not belong and never escape.
\end_layout

\begin_layout Standard
The 
\emph on
AddToBox
\emph default
 program takes a PDB file providing the coordinates of a complete biomolecular
 unit cell or supercell (argument -c), the dimensions by which that supercell
 repeats in space (the unit cell dimensions are taken from the CRYST1 record
 of this file), a PDB file describing the solvent residue to add (argument
 -a), and the number of copies of that solvent molecule to add (argument
 -na).
 
\emph on
AddToBox
\emph default
 inherently assumes that the biomolecular unit cell it is initially presented
 may contain some amount of solvent already, and according to the AMBER
 convention of listing macromolecular solute atoms first and solvent last
 assumes that the first -P atoms in the file are the protein (or biomolecule).
 
\emph on
AddToBox
\emph default
 will then color a very fine grid 
\begin_inset Quotes eld
\end_inset

black
\begin_inset Quotes erd
\end_inset

 if the grid point is within a certain distance of a biomolecular atom (argument
 -RP, default 5.0Å) or other solvent atom (argument -RW, default 1.0Å); the
 grid is 
\begin_inset Quotes eld
\end_inset

white
\begin_inset Quotes erd
\end_inset

 otherwise (the grid is stored in binary for memory efficiency).
 
\emph on
AddToBox
\emph default
 will the make a copy of the solvent residue and randomly rotate and translate
 it somewhere within the unit cell.
 If all atoms of the solvent residue land on 
\begin_inset Quotes eld
\end_inset

white
\begin_inset Quotes erd
\end_inset

 grid voxels, the solvent molecule will become part of the system and the
 grid around the newly added solvent will be blacked out accordingly.
 If the solvent molecule cannot be placed, this process will be repeated
 until a million consecutive failures are encountered, at which point the
 program will terminate.
 If 
\emph on
AddToBox
\emph default
 has not placed the requested number of solvent molecules by the time it
 terminates, the -V option can be used to order the program to recursively
 call itself with progressively smaller solvent buffer distances until all
 the requested solvent can be placed.
 The output of the 
\emph on
AddToBox
\emph default
 program is another PDB named by the -o option.
\end_layout

\begin_layout Standard
Successful operation of 
\emph on
AddToBox
\emph default
 may take practice.
 If multiple solvent species are required, as is the case with heterogeneous
 crystallization solutions, 
\emph on
AddToBox
\emph default
 may be called repeatedly with each input molecular cell being the previous
 call's output.
 When considering crystal solvation, the order of addition is important!
 It is recommended that rare species, such as trace buffer reagents, be
 added first, with large -RW argument to ensure that they are dispersed
 throughout the available crystal void zones.
 Large solvent species such as MPD (an isohexane diol commonly used in crystalli
zation conditions) should be added second, and with a sufficiently large
 -RW argument that methyl groups and ring systems cannot become interlocked
 (which will likely lead to SHAKE / vlimit errors).
 Small and abundant species such as water should be added last, as they
 can go anywhere that space remains.
\end_layout

\begin_layout Standard
Below is an example of the usage for a hypothetical protein with 5431 atoms
 and a net charge of +6 that is to be neutralized with ammonium sulfate:
\end_layout

\begin_layout LyX-Code
AddToBox -c ExpandedCell.pdb -a Sulfate.pdb -na 18 -RP 3.0 -P 5431 -o System.pdb
\end_layout

\begin_layout LyX-Code
AddToBox -c System.pdb -a Ammonium.pdb -na 30 -RP 3.0 -P 5431 -o System.pdb
\end_layout

\begin_layout LyX-Code
AddToBox -c System.pdb -a Water.pdb -na 1089 -RP 3.0 -P 5431 -o System.pdb
\end_layout

\begin_layout Standard
The use of the -V flag ensures that the desired amounts of each species
 are included.
 The protein clipping radius of 3Å is lower than the default, but safe (remember
, this radius stipulates that no solvent atom, regardless of the size of
 the solvent molecule, come within 3Å of the protein).
 Note how the original protein PDB file serves as the base for system, but
 thereafter we work with the System.pdb to accumulate more solvent particles.
 Here, the ammonium sulfate serves both to neutralize the system and replicate
 a salty bath, perhaps from a crystallization mother liquor, hence the break
 from the usual 2:1 stoichiometry of ammonium sulfate ions.
\end_layout

\begin_layout Standard
It is likely that the unobservable 
\begin_inset Quotes eld
\end_inset

void
\begin_inset Quotes erd
\end_inset

 regions between biomolecules in most crystals 
\shape italic
do not
\shape default
 contain solvent species in proportion to their abundance in the crystallization
 solution–the vast majority of these regions are within a few Ångstroms
 of some biomolecular surface, and different biomolecular functional groups
 will preferentially interact with some types of solvent over others.
 Also, in many crystals some solvent molecules 
\shape italic
are
\shape default
 observed; in many of these, the amount of solvent observed is such that
 it would be impossible to pack other species into the unit cell in proportion
 to their abundances in the crystallization fluid.
 In these cases, we recommend estimating the amount of volume that must
 be filled with solvent 
\shape italic
apart from solvent which has already been observed in the crystal
\shape default
, and filling this void with solvent in proportion to the composition of
 the crystallization fluid.
 For example, if a crystal were grown in a 1:1 mole-to-mole water/ethanol
 mixture, and the crystal coordinates as deposited in the PDB contained
 500 water molecules and 3 ethanol molecules, we would use 
\emph on
AddToBox
\emph default
 to add water and ethanol in a 1:1 ratio until the system contained enough
 solvent to maintain the correct volume during equilibrium dynamics at constant
 pressure.
\end_layout

\begin_layout Standard
Finally, it is difficult to estimate exactly how much solvent will be needed
 to maintain the correct equilibrium volume; the advisable approach is simply
 to make an initial guess and script the setup so that, over multiple runs
 and reconstructions, the correct system composition can be found.
 We recommend matching the equilibrium unit cell volume to within 0.3% to
 keep this simulation parameter within the error of most crystallographic
 measurements.
 While errors of 0.5-1% will show up quickly after constant pressure dynamics
 begin, a 10 to 20ns simulation may be needed to ensure that the correct
 equilibrium volume has been achieved.
\end_layout

\begin_layout Subsection
ChBox
\begin_inset CommandInset label
LatexCommand label
name "subsec:ChBox"

\end_inset


\end_layout

\begin_layout Standard
After the complex process of adding solvent, the LEaP program may be used
 to produce a topology and initial set of coordinates based on the PDB file
 produced by 
\emph on
AddToBox
\emph default
.
 By using the 
\shape italic
SetBox
\shape default
 command, LEaP will create a periodic system without adding any more solvent
 on its own.
 The only problem with using LEaP at this point is that the program will
 fail to realize that the system 
\shape italic
does
\shape default
 tile in three dimensions if only the box dimensions are set properly.
 If visualized, the output of UnitCell / PropPDB will likely look jagged,
 but the output of 
\emph on
AddToBox
\emph default
, containing lots of added water, will make it obvious how parts of biomolecules
 jutting out one face of the box fit neatly into open spaces on an opposite
 face.
 The topology produced by LEaP needs no editing; only the last line of the
 coordinates does.
 This can be done manually, but the 
\emph on
ChBox
\emph default
 program automates the process, taking the same coordinates supplied to
 AddToBox and grafting them into the input coordinates file.
\end_layout

\begin_layout Standard
The program is even unnecessary in the case of orthorhombic (rectangular)
 unit cells, as this the tleap command will substitute:
\end_layout

\begin_layout LyX-Code
set [unit] box { <x> <y> <z> }
\end_layout

\begin_layout Standard
For cells that do not have only 90-degree box angles, 
\shape italic
ChBox
\shape default
 will do the trick.
\end_layout

\end_body
\end_document
